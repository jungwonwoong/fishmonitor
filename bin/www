#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cctv:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server);
const Datastore = require('nedb');
const db = new Datastore({ filename: `db/${Date.now()}.db`, autoload: true });

io.of('/video').on('connection', (socket) => {
  socket.on('videocamera', (image) => {
    var frame = Buffer.from(image, 'base64').toString();
    io.of('/user').emit('video', frame)
  })
  socket.on('posdata', (data) => {
    //console.log('xpos: ' + data.x + ', ' + 'ypos: ' + data.y)
    db.insert({_id: Date.now(), x: data.x, y: data.y})
  })
})
io.of('/user').on('connection', (socket) => {
  console.log('클라이언트와 연결됨');
  socket.emit('test', '클라이언트 반갑다');
  const db1 = new Datastore('db/1612403106767.db');
  db1.loadDatabase();
  db1.find({}, (err, docs) => {
    //docs.forEach((el) => {
    //let data = new Date(el.data);
    socket.emit('position', docs)
    //console.log("x: "+el.x+" y: "+ el.y)
    // console.log("20/" + (convertDate.getMonth()+1) + "/" + convertDate.getDate() + "), 시간(" + convertDate.getHours() + ":" + convertDate.getMinutes() + ":" + convertDate.getSeconds())
    //})

  })
  socket.on('vOnOff', (data) => {   
    console.log(data)
      io.of('/video').emit('stopvideo', data)
  })
})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}